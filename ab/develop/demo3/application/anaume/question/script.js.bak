





/*global $, console, alert, adminfn, commonfn*/
commonfn.loginCheck(
    function() {
        'use strict';
    },
    function() {
        'use strict';
        location.href = './../index/';
    }
);
var rate="";


var fn = (function() {
    'use strict';
    return {
        init: function() {
            $("#nav").droppy({
                speed: 100
            });
            var callback = function() {
                adminfn.getTable('anaume', fn.setQuestionInfo);
            };
            adminfn.loginInfo(callback);

            fn.changeResolution();
            fn.directionManage('horizon');
        },
        changeResolution:function(){

            //ディスプレイ解像度
             var displayWidth =  window.screen.width;
            //描画領域の幅
             var boxViewWidth=$("#viewArea").width();
             var boxViewHeight=$("#viewArea").height();
            //フルHDをベースとして，解像度に合わせ画面内に収まるように
            rate=(boxViewWidth)/1920

            $("textContents_wrapper").css("height",boxViewHeight*0.9)
            $("textContents_wrapper").css("width",boxViewWidth)
            $("imageContents_wrapper").css("height",boxViewHeight*0.9)
            $("imageContents_wrapper").css("width",boxViewWidth)


            $(".boxView").css({
                transform:'scale(' + rate  + ')'

            });

        },
        syncSize:function($this){

       $("#imageContents").css('height',$this[0].scrollHeight);
       $("#imageContents").css('width',$this[0].scrollWidth)


        },
        //基本情報
        setQuestionInfo: function() {
            var num = Number(adminfn.takeGET().q);
            adminfn.displayUserInfo();
            if (num) {
                fn.questionOpen(num);
            } else {
                var status = adminfn.param.status,
                    category = status.CATEGORY;
                $('#category').setOption(adminfn.SS.get('category'), category, 1);
                if (Number(category)) {
                    adminfn.categorySelecter($('#school'), category, 'school', status.SCHOOL);
                    adminfn.categorySelecter($('#grade'), category, 'grade', status.GRADE);
                    adminfn.categorySelecter($('#curriculum'), category, 'curriculum', status.CURRICULUM);
                }
                adminfn.unitSelecter($('#unit'), $('#grade').val(), $('#curriculum').val(), null);
                $('#share').setOption(adminfn.SS.get('share'), 1, 1);
            }
        },
        //教材読み込み
        questionOpen: function(num) {
            var sendData = {
                command: 'questionOpen',
                param: num
            };
            $.ajax({
                url: './ajax.php',
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(sendData)
            }).done(function(data) {
                var obj = data[0],
                    category = obj.category;
                adminfn.categorySelecter($('#school'), category, 'school', obj.SCHOOL);
                adminfn.categorySelecter($('#grade'), category, 'grade', obj.GRADE);
                adminfn.categorySelecter($('#curriculum'), category, 'curriculum', obj.CURRICULUM);
                //objのtextContentsとimageContentsを画面反映？
            });
        },
        //教材保存
        questionSave: function(num) {
            var obj, sendData;
            obj = {};
            sendData = {
                command: 'questionSave',
                param: obj
            };
            $.ajax({
                url: './ajax.php',
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(sendData)
            }).done(function(data) {});
        },
        directionManage: function(rotate) {

            $("#textContents").css({'left':"0", 'right':"0", })

            if (rotate == 'vertical') {

                $("#textContents_wrapper").removeClass('textContents_wrapper_horizon').addClass('textContents_wrapper_vertical');
                $("#textContents").removeClass('textContents_horizon').addClass('textContents_vertical');
                $(".boxView").removeClass('boxView_horizon').addClass('boxView_vertical');
                $("#imageContents_wrapper").removeClass('imageContents_wrapper_horizon').addClass('imageContents_wrapper_vertical');
               $("#imageContents").removeClass('imageContents_horizon').addClass('imageContents_vertical');


                //writing-modeのCSS解釈がブラウザによって異なる
                //chromeは要件外だが，念のため導入
                var userAgent = window.navigator.userAgent.toLowerCase();
                if (userAgent.indexOf('chrome') != -1) {
                    $("#textContents").css({
                        'left':'-80px',
                        'right':'80px',
                    })
                 }
            } else {
                $("#textContents_wrapper").addClass('textContents_wrapper_horizon').removeClass('textContents_wrapper_vertical');
                $("#textContents").removeClass('textContents_vertical').addClass('textContents_horizon');
                $(".boxView").removeClass('boxView_vertical').addClass('boxView_horizon');
                $("#imageContents_wrapper").addClass('imageContents_wrapper_horizon').removeClass('imageContents_wrapper_vertical');
                $("#imageContents").removeClass('imageContents_vertical').addClass('imageContents_horizon');
            }



            $("#viewArea").height()
            $("#textContents_wrapper").css('height',$("#viewArea").height()*1/rate)
            $("#imageContents_wrapper").css('height',$("#viewArea").height()*1/rate)
            $(".boxView").css('height',$("#viewArea").height()*1/rate)

            fn.syncSize($('#textContents'))
        },
    };
}());
var nodeFactory = (function() {
    return {
        setLineStyle: function(callback) {
            nodeFactory.setNodeStyle($("#textContents p"), callback, false);
            window.getSelection().collapse(document.body, 0);
        },
        setNodeStyle: function(candidateNodes, callback, extractsTextRange) {
            var selection = getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                //スタイル適用対象のノードを入れる配列
                var targetNodes = new Array();
                for (var i = 0; i < candidateNodes.length; i++) {
                    var currentRange = document.createRange();
                    currentRange.selectNodeContents(candidateNodes[i]);
                    if (extractsTextRange) {
                        //ノードの範囲をテキストの範囲に狭める
                        currentRange = nodeFactory.getTextRange(currentRange);
                    }
                    if (currentRange.compareBoundaryPoints(Range.START_TO_END, range) > 0 && currentRange.compareBoundaryPoints(Range.END_TO_START, range) < 0) {
                        //現在のノードがRangeの一部または全部を含む場合はスタイル適用対象
                        targetNodes.push(candidateNodes[i]);
                    }
                    if (currentRange.compareBoundaryPoints(Range.END_TO_START, range) >= 0) {
                        //現在のノードがRangeより完全に後ろにある場合は終了する
                        break;
                    }
                }
                callback(targetNodes);
                window.getSelection().collapse(document.body, 0);
            }
        },
        getTextRange: function(range) {
            var textRange = range.cloneRange();
            if (textRange.collapsed) {
                //テキストを含んでいない場合
                return textRange;
            }
            //開始位置
            if (range.startContainer.nodeType != Node.TEXT_NODE) {
                var node = range.startContainer;
                node = node.firstChild;
                for (var i = 0; i < range.startOffset; i++) {
                    node = node.nextSibling;
                    if (!node) {
                        node = nodeFactory.nextNode(range.startContainer.lastChild, false, null);
                        break;
                    }
                }
                if (!nodeFactory.isTextNode(node)) {
                    node = nodeFactory.nextTextNode(node, null);
                }
                textRange.setStart(node, 0);
            } else if (range.startOffset == range.startContainer.length) {
                var node = range.startContainer;
                node = nodeFactory.nextTextNode(node, null);
                textRange.setStart(node, 0);
            }
            //終了位置
            if (range.endContainer.nodeType != Node.TEXT_NODE) {
                var node = range.endContainer;
                node = node.firstChild;
                if (range.endOffset == 0) {
                    node = nodeFactory.prevTextNode(range.endContainer, null);
                } else {
                    for (var i = 0; i < range.endOffset - 1; i++) {
                        node = node.nextSibling;
                    }
                    node = nodeFactory.lastNode(node);
                }
                if (!nodeFactory.isTextNode(node)) {
                    node = nodeFactory.prevTextNode(node, null);
                }
                textRange.setEnd(node, node.length);
            } else if (range.endOffset == 0) {
                var node = range.endContainer;
                node = nodeFactory.prevTextNode(node, null);
                textRange.setEnd(node, node.length);
            }
            return textRange;
        },
        //合理的
        isTextNode: function(node) {
            return (node.nodeType == Node.TEXT_NODE && node.textContent.trim() != "") ? true : false;
        },
        nextTextNode: function(node, endNode) {
            do {
                node = nodeFactory.nextNode(node, true, endNode);
            } while (node != null && !nodeFactory.isTextNode(node));
            return node;
        },
        prevTextNode: function(node, startNode) {
            do {
                node = nodeFactory.prevNode(node, startNode);
            } while (node != null && !nodeFactory.isTextNode(node));
            return node;
        },
        nextNode: function(node, child, endNode) {
            if (child && node.firstChild) {
                return node.firstChild;
            }
            if (!endNode) {
                endNode = document.body;
            }
            while (node != endNode) {
                if (node.nextSibling) {
                    return node.nextSibling;
                }
                node = node.parentNode;
            }
            return null;
        },
        /**
         * 前の兄弟の最後の子孫を探す。
         * 前の兄弟が子を持たない場合は、前の兄弟を返す
         * そのノード内に兄弟がいない場合は、親を返す
         */
        prevNode: function(node, startNode) {
            if (!startNode) {
                startNode = document.body;
            }
            if (!node.previousSibling) {
                if (node.parentElement == startNode) {
                    return null;
                }
                return node.parentNode;
            }
            return nodeFactory.lastNode(node.previousSibling);
        },
        /**
         * 指定したノードの最後の子孫を探す。
         * 指定したノードが子を持たない場合は、自分自身を返す
         */
        lastNode: function(node) {
            while (node.lastChild) {
                node = node.lastChild;
            }
            return node;
        },
        setTextStyle: function(callback) {
            var textContainer = $("#textContents")[0];
            var selection = getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                //テキストノードの事前処理
                if (range.startContainer.nodeType == Node.TEXT_NODE) {
                    //テキストノードをRangeの開始点の位置で2つに分ける
                    range.startContainer.splitText(range.startOffset);
                    //選択範囲の開始点をテキストノードの外側にする
                    range.setStartAfter(range.startContainer);
                }
                //終了点についても同じ処理を行う
                if (range.endContainer.nodeType == Node.TEXT_NODE) {
                    //テキストノードをRangeの終了点の位置で2つに分ける
                    range.endContainer.splitText(range.endOffset);
                    //選択範囲の終了点をテキストノードの外側にする
                    range.setEndAfter(range.endContainer);
                }
                //現在処理中のノードを初期化
                var currentNode = textContainer;
                var currentRange = document.createRange();
                currentRange.selectNode(currentNode);
                //スタイル適用対象のノードを入れる配列
                var targetNodes = new Array();
                while (currentNode = nodeFactory.nextTextNode(currentNode, textContainer)) {
                    currentRange.selectNode(currentNode);
                    if (currentRange.compareBoundaryPoints(Range.END_TO_START, range) >= 0) {
                        //現在のノードがRangeより完全に後ろにある場合は終了する
                        break;
                    }
                    if (currentRange.compareBoundaryPoints(Range.START_TO_START, range) >= 0 && currentRange.compareBoundaryPoints(Range.END_TO_END, range) <= 0) {
                        //現在のノードがRangeに完全に含まれる場合、このノードにスタイルを適用
                        (function() {
                            var node = currentNode;
                            var range = document.createRange();
                            range.selectNode(node);
                            node = $("<span>")[0];
                            range.surroundContents(node);
                            targetNodes.push(node);
                        })();
                    }
                }
                callback(targetNodes);
                //選択状態解除
                window.getSelection().collapse(document.body, 0);
            }
        },
        getStyle: function(node, styleName) {
            var textContainer = $("#textContents");
            while (node && node != textContainer) {
                if (node.style && node.style[styleName]) {
                    return node.style[styleName];
                }
                node = node.parentNode;
            }
            return null;
        },
        surroundWithPTag: function() {
            var textContainer = $("#textContents");
            if (textContainer.firstChild.nodeType == Node.TEXT_NODE) {
                //要素がテキストノードの場合はpで囲む
                var range = document.createRange();
                range.selectNode(textContainer.firstChild);
                var p = $("<p>");
                range.surroundContents(p);
                var sel = getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
            }
        }
    };
}());
var styleFactory = (function() {
    return {
        textAlign: function(align) {
            nodeFactory.surroundWithPTag();
            nodeFactory.setLineStyle(function(nodes) {
                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].style["text-align"] = align;
                }
            });
        },
        lineHeight: function(height) {
            nodeFactory.setLineStyle(function(nodes) {
                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].style["line-height"] = height;
                }
            });
        },
        fontSize: function(em) {
            nodeFactory.setLineStyle(function(nodes) {
                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].style["font-size"] = em + "em";
                }
            });
        },
        fontWeight: function() {
            nodeFactory.setTextStyle(function(nodes) {
                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].style["font-weight"] = (nodeFactory.getStyle(nodes[0], "font-weight") == "bold") ? "normal" : "bold";
                }
            });
            styleFactory.underlineForce();
        },
        fontColor: function(color) {
            nodeFactory.setTextStyle(function(nodes) {
                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].style["color"] = color;
                }
            });
            styleFactory.underlineForce();
        },
        textDecoration: function() {
            var spans = $("#textContents span");
            var underLineSpans = new Array();
            for (var i = 0; i < spans.length; i++) {
                if (spans[i].textContent != "" && spans[i].style["text-decoration"] == "underline") {
                    underLineSpans.push(spans[i]);
                }
            }
            nodeFactory.setNodeStyle(underLineSpans, function(nodes) {
                if (nodes.length > 0) {
                    for (var i = 0; i < nodes.length; i++) {
                        nodes[i].style["text-decoration"] = "";
                    }
                } else {
                    nodeFactory.setTextStyle(function(targetNodes) {
                        for (var i = 0; i < targetNodes.length; i++) {
                            targetNodes[i].style["text-decoration"] = "underline";
                        }
                    });
                }
            }, true);
        },
        underlineForce: function() {
            var $spans = $("#textContents").find("span[style*='text-decoration']");
            $spans
                .addClass("text-decoration")
                .css("text-decoration", "")
            for (var i = 0; i < $spans.length; i++) {
                //都度，選択範囲を動的生成する
                var element = $spans[i];
                var rng = document.createRange();
                rng.selectNodeContents(element);
                window.getSelection().removeAllRanges();
                window.getSelection().addRange(rng);
                nodeFactory.setNodeStyle($spans[i], function(nodes) {
                    nodeFactory.setTextStyle(function(targetNodes) {
                        for (var i = 0; i < targetNodes.length; i++) {
                            targetNodes[i].style["text-decoration"] = "underline";
                        }
                    });
                }, true);
            }
            $('.text-decoration').each(function() {
                $(this).replaceWith($(this).html());
            })
        }
    };
}());
var imageFactory = (function() {
    var 
        zIndex = 4;
    return {
        upload: function() {
            var $image = $('#imageContents');
            var $input;
            //Up用のエレメント作成
            $input = $("<input type='file' accept='image/*' style='display:none;'>");
            $input.on("change", function() {
                imageFactory._insert(this.files[0], '"' + $image.attr('id') + '"')
            });
            //一時的に追加し削除
            $image.append($input);
            $input.trigger('click');
        },
        _insert: function(imgFile) {
            var reader;
            reader = new FileReader();
            reader.readAsDataURL(imgFile);
            reader.onloadend = function() {
                imageFactory._create(reader.result, imgFile.name);
            };
        },
        _create: function(src, srcFileName) {
            var $image = $('#imageContents');
            var img = new Image();
            img.src = src;
            img.onload = function() {
                var canvas, context, maxSize, rw, rh, blob, imgFileName, handleBox, gazou, gazouBox, handleBox01, handleBox02, handleBox03;
                canvas = $("<canvas>")[0];
                context = canvas.getContext("2d");
                maxSize = 500;
                rw = img.width;
                rh = img.height;
                if (img.width > img.height) {
                    if (img.width > maxSize) {
                        rw = maxSize;
                        rh = img.height * maxSize / img.width;
                    }
                }
                if (img.width < img.height) {
                    if (img.height > maxSize) {
                        rw = img.width * maxSize / img.height;
                        rh = maxSize;
                    }
                }
                context.clearRect(0, 0, 0, 0);
                canvas.width = rw;
                canvas.height = rh;
                context.drawImage(img, 0, 0, rw, rh);
                //一度sessionStorageへ保存
                imgFileName = commonfn.getNowDate() + srcFileName;
                // adminfn.SS.set(imgFileName, canvas.toDataURL("image/png"));
                $gazou = $("<img>", {
                        "id": imgFileName,
                        "class": "ui-widget-content",
                        "name": "gazou",
                        "alt": imgFileName,
                    }).css({
                        // "box-sizing": "reset",
                        "cursor": "pointer",
                        // "z-index": zIndex += 10,
                        "position":"absolute"
                    })
                    .attr("src", canvas.toDataURL("image/png"))
                $image.append($gazou);
                $image.find("input").remove();
            };
        },
        _base64toBlob: function(base64Data) {
            var bin, buffer, blob, i;
            bin = atob(base64Data.replace(/^.*,/, ""));
            buffer = new Uint8Array(bin.length);
            for (i = 0; i < bin.length; i++) {
                buffer[i] = bin.charCodeAt(i);
            }
            blob = new Blob([buffer.buffer], {
                type: "image/png"
            });
            return blob;
        },
        focus: function(e) {
            if (window.location.pathname.split("/").pop() === "education.html") {
                return false;
            }
            if(e.target.id=="")return;
            if(e.target.id=="imageContents"){
                  //画像を2枚以上配置し，先に配置したほうをドラッグして，後に配置した方に重ねると
                //target.idがImagecontentsになり，エラーとなる不具合
                  imageFactory.delFocus();
                  return false;
            }
            //アクティブな画像がない場合
            if ($('#imageContents .ui-wrapper').length == 0) {
                imageFactory._addHandle(e.target.id);
            } else {
                //アクティブな画像がある
                if ($(document.getElementById(e.target.id)).parent().hasClass('ui-wrapper')) {
                    //クリックした画像がアクティブな場合，delして終了
                    imageFactory._delHandle(e.target.id);
                } else {
                    //クリックした画像がアクティブでない場合，クリック画像はアクティブに，その他はdel
                    $('#imageContents .ui-wrapper').each(function() {
                        imageFactory._delHandle($(this).children("img").attr('id'));
                    });
                    imageFactory._addHandle(e.target.id);
                }
            }
        },
        _addHandle: function(handleTargetId) {
            $target = $(document.getElementById(handleTargetId));
            $target.css("opacity", "0.2");
            $target.resizable({
                aspectRatio: true,
                resize:function(event){
                    $(this).parent().attr('draggable','false')
                    event.stopPropagation();
                }
            })

            var offset=$(viewArea).offset();
            var width=$(viewArea).width();
            var height=$(viewArea).height();


            //生成されるガワだけ使用する．ドラッグ部分は独自実装
            $target.parent().draggable({
                containment:[ offset.left,  offset.top, width, height ],
                stack:"true",
                drag:function( event, ui ){
                   return false;
                },
                start:function( event, ui ){
                   return false;
                }                
            });



            var func=(function(that){
                 if($(that).attr('draggable')=='true'){
                        var $element=document.getElementById("viewArea")
                        var rect = $element.getBoundingClientRect() ;
                        var left = rect.left + window.pageXOffset ;    // 要素のX座標
                        var top = rect.top + window.pageYOffset ; // 要素のY座標

                        var $wrapper=document.getElementById("imageContents_wrapper");
                        var scrollTop=$wrapper.scrollTop;
                        var scrollLeft=$wrapper.scrollLeft;


                        var relativeMouseY=that.clientHeight/2;
                        var relativeMouseX=that.clientWidth/2;

                        $(that).children('img')[0].style.top=
                            (event.clientY+scrollTop-(top+(relativeMouseY)*rate))*(1/rate)  +"px";


                        $(that).children('img')[0].style.left=
                            (event.clientX+scrollLeft-(left+(relativeMouseX)*rate))*(1/rate)  +"px";


                        that.style.top= 
                            (event.clientY+scrollTop-(top+(relativeMouseY)*rate))*(1/rate)  +"px";
                        that.style.left= 
                            (event.clientX+scrollLeft-(left+(relativeMouseX)*rate))*(1/rate)  +"px";
                    }
                });

            $target.parent().on('mousedown',function(event){
                //クリックしたものがリサイズアイコンでない場合，ドラッグスイッチを入れる
                //回転の完了のクリック時も何もしない
                if(event.target.className.indexOf('ui-resizable-se')==-1　
                    && event.target.className.indexOf('rotate_handle')==-1
                        &&　($(event.target).attr('rotate_flag')!="true")){
                        $(this).attr('draggable','true');                
                        func(this);
                }
            });
            $target.parent().on('mouseup',function(event){
                    $(this).attr('draggable','false')

            });

            //マウスへの追従速度を上げるため，この箇所はネイティブで書く
            $target.parent().on('mousemove',function(event){
                    func(this);
            });


            $target.parent()
                .prepend(
                    $("<span>", {
                        "class": "rotate_handle",
                        "text": "●"
                    }).css({
                        "position": "absolute",
                        "cursor": "crosshair",
                        "z-index": "10",
                        "fontsize": "20px",
                        "width":"100%",
                        "left": 0,
                        "right": 0
                    }).click(function(e) {
                        var rotate_flag = $target.attr("rotate_flag");
                        $target.attr("rotate_flag", (rotate_flag == "true") ? "false" : "true");
                        var degree = imageFactory._getDegree($target);
                        $target.parent().transition({
                            opacity: 1,
                            scale: 1
                        }, 0);
                        $target.parent().css({
                            rotate: degree + 'deg'
                        });
                        e.stopPropagation();
                    })
                );
            //ラッパーに角度をつける
            $target.parent().css("rotate", $target.attr("degree"));
            //内部の角度は0に戻す
            $target.css({
                "rotate": "0deg"
            })
            $target.parent().mousemove(function(e) {
                var rotate_flag = $target.attr("rotate_flag");
                if (rotate_flag == "true") {
                    var degree = imageFactory._getDegree($target, e);
                    $target.parent().transition({
                        opacity: 1,
                        scale: 1
                    }, 0);
                    $target.parent().css({
                        rotate: degree + 'deg'
                    });
                }
            })
        },
        _delHandle: function(handleTargetId) {
            var handles, i;
            $target = $(document.getElementById(handleTargetId));
            var rotate_flag = $target.attr("rotate_flag");
            if (rotate_flag == "true") {
                $target.attr("rotate_flag", "false");
            }
            var degree = $target.attr("degree");
            //画像に，外枠の角度を反映
            $target.css("transform", "scale(1, 1) rotate(" + degree + "deg)");
            $target.css("opacity", "1");
            $target.parent().draggable("destroy");
            $target.resizable("destroy");


        },
        _getDegree: function($target, e) {
            e = e || null;
            var imgRect = $target[0].getBoundingClientRect();
            if (e) {
                $target.attr("rotate_x", e.clientX);
                $target.attr("rotate_y", e.clientY);
            }
            var rotate_x = $target.attr("rotate_x");
            var rotate_y = $target.attr("rotate_y");
            if (rotate_x == 0 && rotate_y == 0) {
                return 0;
            }
            var mousePos = {
                "x": rotate_x,
                "y": rotate_y
            }　
            var imgPos = {
                "x": imgRect.left + (imgRect.width / 2),
                "y": imgRect.top + (imgRect.height / 2)
            };
            var radian = Math.atan2((imgPos.y - mousePos.y), (imgPos.x - mousePos.x));
            //現在の角度を格納
            var degree = (radian * 180 / Math.PI) - 90;
            $target.attr("degree", degree);
            $("#title").val(degree);
            return degree;
        },
        del:function(e){
            if (e.keyCode === 46 && $('#imageContents .ui-wrapper').length > 0) {
                $('#imageContents .ui-wrapper img').remove();
                $('#imageContents .ui-wrapper').remove();
                //削除効果がテキストコンテントに及ぶのを防ぐ
                e.preventDefault();
            }
        },
        delFocus:function(){
           if($('#imageContents .ui-wrapper').length>0){
                $('#imageContents .ui-wrapper').each(function() {
                    imageFactory._delHandle($(this).children("img").attr('id'));
                });
            }
        }
    }
})();
$(function() {
    'use strict';
    //events
    $(document)
        .on('change', '#category', function() {
            //学校種別切り替え時イベント
            var array, category = $(this).val();
            adminfn.categorySelecter($('#school'), category, 'school');
            adminfn.categorySelecter($('#grade'), category, 'grade');
            adminfn.categorySelecter($('#curriculum'), category, 'curriculum');
        }).on('change', '#category, #grade, #curriculum', function() {
            adminfn.unitSelecter($('#unit'), $('#grade').val(), $('#curriculum').val(), null);
        })
        //dirextion control
    $(document)
        .on('mousedown', '#textyoko', function() {
            fn.directionManage('horizon');
        }).on('mousedown', '#texttate', function() {
            fn.directionManage('vertical');



        })
        //text-align
    $(document)
        .on('mousedown', '#alignleft', function() {
            styleFactory.textAlign('left');
        }).on('mousedown', '#aligncenter', function() {
            styleFactory.textAlign('center');
        }).on('mousedown', '#alignright', function() {
            styleFactory.textAlign('right');
        });
    //line-height
    $(document)
        .on('mousedown', '#lineHeight_normal', function() {
            styleFactory.lineHeight('normal');
        }).on('mousedown', '#lineHeight_2', function() {
            styleFactory.lineHeight(2);
        }).on('mousedown', '#lineHeight_3', function() {
            styleFactory.lineHeight(3);
        }).on('mousedown', '#lineHeight_4', function() {
            styleFactory.lineHeight(4);
        });
    //font-size
    $(document)
        .on('mousedown', '#size_1', function() {
            styleFactory.fontSize('1');
        }).on('mousedown', '#size_2', function() {
            styleFactory.fontSize('2');
        }).on('mousedown', '#size_4', function() {
            styleFactory.fontSize('4');
        }).on('mousedown', '#size_6', function() {
            styleFactory.fontSize('6');
        }).on('mousedown', '#size_8', function() {
            styleFactory.fontSize('8');
        });
    //font-weight,text-decoration,font-color
    $(document)
        .on('click', "#fontWeight", function() {
            styleFactory.fontWeight();
        }).on('click', "#underLine", function() {
            styleFactory.textDecoration();
        }).on('click', "#fontRed", function() {
            styleFactory.fontColor('red')
        }).on('click', "#fontBlue", function() {
            styleFactory.fontColor('blue')
        }).on('click', "#fontBlack", function() {
            styleFactory.fontColor('black')
        })
        //initial
    $(document)
        .on('click', "#insertImage", function() {
            imageFactory.upload();
        })
    //画像のフォーカス管理
    $(document)
        .on('click', "#imageContents", function(e) {
            imageFactory.focus(e);
        })
    //DELでフォーカスな画像を削除
    $(window).keydown(function(e) {
        imageFactory.del(e);
    });
    //テキストにフォーカスしたら，画像のフォーカスを外す
    $(document)
     .on('focus', "#textContents", function() {
        imageFactory.delFocus();
     })
    //テキストコンテンツエリアへの画像ドロップ禁止
    $(document).on('drop dragover','#textContents',function (e) {
        e.stopPropagation();
        e.preventDefault();
    });

    $(window).on('resize',function(){

        fn.changeResolution();

    })

    $('#textContents').on('DOMSubtreeModified propertychange', function() {

        fn.syncSize($(this));

    });



    // 画像へのスクロールイベント禁止
    var scroll_event = 'onwheel' in document ? 'wheel' : 'onmousewheel' in document ? 'mousewheel' : 'DOMMouseScroll';
    $("#imageContents_wrapper").on(scroll_event,function(e){e.preventDefault();});


    //横書き用スクロール同期
    $('#textContents_wrapper').scroll( function() {
      $("#imageContents_wrapper").scrollLeft( $('#textContents_wrapper').scrollLeft() );
      $("#imageContents_wrapper").scrollTop( $('#textContents_wrapper').scrollTop() );
    });


    //縦書き用スクロール同期
    $('#textContents').scroll( function() {
      $("#imageContents_wrapper").scrollLeft($('#textContents').scrollLeft() );
      $("#imageContents_wrapper").scrollTop( $('#textContents').scrollTop() );
    });


    fn.init();
});
