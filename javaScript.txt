========
JSON形式

//JSON形式へ
result = JSON.stringify(result);

//JSON形式戻す
JSON.parse(result);

==============
XMLHttpRequest（PHPとの通信）
XMLHttpRequest は、クライアントとサーバーの間でデータを伝送するための機能をクライアント側で提供する API です。ページ全体を再読み込みすることなく、URL からデータを読み出す簡単な方法を提供します。この API によって、ユーザの作業を中断させることなく Web ページの一部を更新することができます。 XMLHttpRequest は AJAX プログラミングで多く使用されます。

phpUrl = "./php/questionSave.php";
xmlhr = new XMLHttpRequest();
xmlhr.open("POST", phpUrl, true);
xmlhr.onreadystatechange = function() {
    if (xmlhr.readyState === 4) {
        response = xmlhr.responseText;
        modalView("saveFin")
    }
};
//bはオブジェクト
xmlhr.send(JSON.stringify(b));


====================
セッションストレージ（cookieを利用したブラウザ側で値を保存し、ブラウザが閉じるまで有効）
セット
sessionStorage.setItem('userID', cvUserID);
ゲット
var userID = sessionStorage.getItem('userID');


==========
ハッシュ化

//ハッシュ化のライブラリ
<script src="./jsSHA-2.0.1/src/sha256.js"></script>
//繰り返し数
stretchCount = 1000;

//ハッシュ化のインスタンス
saltObj = new jsSHA("SHA-256", "TEXT");
//ユーザＩＤをアップデートメソッドで渡す
saltObj.update(userId);
//ハッシュオブジェクトからハッシュを取得する
salt = saltObj.getHash("HEX");
hash = "";

//１０００回の繰り返し
for (i = 0; i < stretchCount; i += 1) {
    //ハッシュオブジェクトのインスタンス作成
    shaObj = new jsSHA("SHA-256", "TEXT");
    //アップデートメソッドでハッシュとユーザＩＤをハッシュしたものと、パスワードをアップデートメソッドで渡す
    shaObj.update(hash + salt + password);
    //ハッシュを取得する
    hash = shaObj.getHash("HEX");
}

//POST送信
<script type=“text/javascript”>
function sampleForm( value ){
    var form = document.createElement( ‘form’ );
    document.body.appendChild( form );
    var input = document.createElement( ‘input’ );
    input.setAttribute( ‘type’ , ‘hidden’ );
    input.setAttribute( ‘name’ , ‘name’ );
    input.setAttribute( ‘value’ , value );
    form.appendChild( input );
    form.setAttribute( ‘action’ , ‘送信したいファイル’ );
    form.setAttribute( ‘method’ , ‘post or get’ );
    form.submit();
}
</script>
